generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  NORMAL
  HOTEL_ADMIN
  SUPER_ADMIN
  DELIVERER
}

enum ProductCategory {
  FOOD
  DRINK
}

enum OrderStatus {
  PENDING
  COMPLETED
  DELIVERED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

model User {
  id                String          @id @default(uuid())
  first_name        String
  last_name         String
  email             String          @unique
  password          String
  // phone_number      String? // to be added
  admin_hotels      Hotel[]
  // hotel             Hotel?          @relation(fields: [hotelId], references: [id])
  role              Role            @default(NORMAL)
  verification      Verification?
  password_reset    PasswordReset?
  orders            Order[]
  reviews           Review[]
  notifications     Notification[]
  notificationToken String?
  assigned_orders   AssignedOrder[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // hotelId    Int?

  @@map("users")
}

model AssignedOrder {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("assigned_orders")
}

model Verification {
  id                      String             @id @default(uuid())
  user                    User               @relation(fields: [user_id], references: [id])
  user_id                 String             @unique
  verification_status     VerificationStatus @default(UNVERIFIED)
  verificationToken       String
  verificationTokenExpiry DateTime
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt

  @@map("user_verifications")
}

model PasswordReset {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [user_id], references: [id])
  user_id             String   @unique
  passwordResetToken  String
  passwordResetExpiry DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("user_password_resets")
}

model Order {
  id                 String         @id @unique @default(uuid())
  customer           User           @relation(fields: [customer_id], references: [id])
  customer_id        String
  hotel              Hotel          @relation(fields: [hotel_id], references: [id])
  hotel_id           Int
  date               DateTime       @default(now())
  deliveryAddress    DeliveryInfo   @relation(fields: [deliveryAddress_id], references: [id])
  deliveryAddress_id String         @unique
  products           CartItem[]
  price              Float
  review             Review?
  status             OrderStatus?   @default(PENDING)
  payments           Payment[]
  isPaid             Boolean        @default(false)
  assignment         AssignedOrder?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders")
}

model DeliveryInfo {
  id          String   @id @default(uuid())
  order       Order?
  full_name   String
  telephone   String
  plateNumber String?
  address     Address  @relation(fields: [address_id], references: [id])
  address_id  String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("delivery_infos")
}

model Address {
  id            String         @id @default(uuid())
  name          String
  city          String
  street        String?
  longitude     Float
  latitude      Float
  country       String?
  deliveryInfos DeliveryInfo[]
  hotels        Hotel?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("addresses")
}

model Payment {
  id             String        @id @default(uuid())
  order          Order         @relation(fields: [order_id], references: [id])
  order_id       String
  payment_method PaymentMathod
  amount         Float
  currency       Currency
  status         PaymentStatus @default(PENDING)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  @@map("payments")
}

enum Currency {
  USD
  RWF
}

enum PaymentMathod {
  CARD
  MoMo
  GooglePay
  ApplePay
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Hotel {
  id                  Int     @id @unique @default(autoincrement())
  admins              User[]
  name                String
  menu                Menu?
  address             Address @relation(fields: [address_id], references: [id])
  address_id          String  @unique
  orders              Order[]
  rating              Float   @default(0)
  lastMonthOrders     Int?    @default(0)
  ThisWeekOrders      Int?    @default(0)
  startingWorkingTime String
  endingWorkingTime   String
  image               String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("hotels")
}

model Menu {
  id       Int        @id @unique @default(autoincrement())
  hotel    Hotel      @relation(fields: [hotel_id], references: [id])
  hotel_id Int        @unique
  items    MenuItem[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("menus")
}

model MenuItem {
  id                 Int         @id @unique @default(autoincrement())
  name               String
  menu               Menu        @relation(fields: [menu_id], references: [id])
  menu_id            Int
  price              Float
  sub_category       SubCategory @relation(fields: [sub_category_id], references: [id])
  sub_category_id    Int
  quantity_available Int
  description        String
  image              String
  reviews            Review[]
  cart_items         CartItem[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("menu_items")
}

model CartItem {
  id          String   @id @default(uuid())
  menu_item   MenuItem @relation(fields: [menuItem_id], references: [id])
  quantity    Int
  createdAt   DateTime @default(now())
  menuItem_id Int
  orders      Order[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("cart_items")
}

model SubCategory {
  id          Int             @id @unique @default(autoincrement())
  type        ProductCategory
  items       MenuItem[]
  description String
  image       String?
  name        String          @unique
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt

  @@map("sub_categories")
}

model Review {
  id          String     @id @unique @default(uuid())
  user        User       @relation(fields: [user_id], references: [id])
  user_id     String
  description String
  title       String
  order       Order?     @relation(fields: [order_id], references: [id])
  order_id    String?    @unique
  menu_items  MenuItem[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("reviews")
}

enum NotificationType {
  ORDER_PLACED
  OTHER
}

model Notification {
  id         String           @id @unique @default(uuid())
  title      String
  content    String
  type       NotificationType
  receivers  User[]
  createdAt  DateTime?        @default(now())
  imageLabel String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notifications")
}

model secret {
  id   String @id @default(uuid())
  data Json
}
