// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  NORMAL
  ADMIN
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

model users {
  id             String         @id @default(uuid())
  first_name     String
  last_name      String
  email          String         @unique
  password       String
  admin_hotels   Hotel[]
  role           Role?       @default(NORMAL)
  verification   Verification?
  password_reset PasswordReset?
  orders         Order[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
 resetToken     String?
  @@map("users")
}

model Verification {
  id                      String             @id @default(uuid())
  user                    users              @relation(fields: [user_id], references: [id])
  user_id                 String             @unique
  verification_status     VerificationStatus @default(UNVERIFIED)
  verificationToken       String
  verificationTokenExpiry DateTime
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt

  @@map("user_verifications")
}

model PasswordReset {
  id                  String   @id @default(uuid())
  user                users    @relation(fields: [user_id], references: [id])
  user_id             String   @unique
  passwordResetToken  String
  passwordResetExpiry DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("user_password_resets")
}

model Order {
  order_id             String    @id @unique @default(uuid())
  customer             users     @relation(fields: [customer_id], references: [id])
  customer_id          String    
  date                 DateTime
  deliveryAddress      Address   @relation(fields: [address_id], references: [address_id])
  address_id           String 
  products             MenuItem[] 
  price                Float
  review               String?
  rating               Float?
}

model CoffeeProduct {
  coffee_id          String @id @unique @default(uuid())
  order_id           String @unique
  hotel_id           Int
  name               String
  price              Float
  quantity_available Int
  type               String
}

model Hotel {
  hotel_id            Int      @id @unique @default(autoincrement())
  admin               users ?   @relation(fields: [admin_id], references: [id])
  admin_id            String?   @unique
  name                String
  menu                Menu?
  address             Address?
  rating              Float    @default(0)
  lastMonthOrders     Int?     @default(0)
  ThisWeekOrders      Int?     @default(0)
  startingWorkingTime DateTime @default(now())
  endingWorkingTime   DateTime @default(now())
  image               String
}

model Address {
  address_id String  @id @default(uuid())
  hotel      Hotel   @relation(fields: [hotel_id], references: [hotel_id])
  order      Order[]
  hotel_id   Int     @unique
  latitude   Float
  longitude  Float
  street     String
  district   String
  sector     String
  cell       String
  village    String
}

model Menu {
  menu_id    Int        @id @unique @default(autoincrement())
  hotel      Hotel     @relation(fields: [hotel_id], references: [hotel_id])
  hotel_id   Int        @unique
  items      MenuItem[]
  categories Category[]
}

model MenuItem {
  menuItem_id Int    @id @unique @default(autoincrement())
  name        String
  Menu               Menu ?     @relation(fields: [menu_id], references: [menu_id])
  menu_id            Int?
  price              Float
  category           Category @relation(fields: [category_id], references: [category_id])
  category_id        Int
  quantity_available Int
  description        String
  image              String?
  Order              Order? @relation(fields:[order_id],references:[order_id])
  order_id String? @unique
}

model Category {
  category_id   Int        @id @unique @default(autoincrement())
  subcategories String[]
  menu          Menu[]
  menuItem      MenuItem[]
  description   String
  image         String?
  name          String
}


model Reviews{
  id String @id @unique @default(uuid())
  description String
  product MenuItem @relation(fields:[product_id],references:[menuItem_id])
  product_id Int
  createdAt Datetime
  customer users @relation(fields:[customer_id],references:[id])
}