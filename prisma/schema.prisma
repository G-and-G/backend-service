generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Role {
  NORMAL
  ADMIN
}

enum CATTYPE{
  FOOD
  DRINK
}

enum Status{
  PENDING
  COMPLETED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

model users {
  id                String           @id @default(uuid())
  first_name        String
  last_name         String
  email             String           @unique
  password          String
  admin_hotels      Hotel[]
  role              Role?            @default(NORMAL)
  verification      Verification?
  password_reset    PasswordReset?
  orders            Order[]
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  resetToken        String?
  Review            Review[]
  notifications     Notifications[]
  notificationToken String?
  PropertyTenant    PropertyTenant[]

  @@map("users")
}

model Verification {
  id                      String             @id @default(uuid())
  user                    users              @relation(fields: [user_id], references: [id])
  user_id                 String             @unique
  verification_status     VerificationStatus @default(UNVERIFIED)
  verificationToken       String
  verificationTokenExpiry DateTime
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt

  @@map("user_verifications")
}

model PasswordReset {
  id                  String   @id @default(uuid())
  user                users    @relation(fields: [user_id], references: [id])
  user_id             String   @unique
  passwordResetToken  String
  passwordResetExpiry DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("user_password_resets")
}
model DeriveryAddress{
  derivery_id String @id @default(uuid())
  order       Order  @relation(fields: [order_id], references: [order_id])
  order_id    String @unique
  full_name String
  telephone String
  address String
  city String
}
model Order {
  order_id          String     @id @unique @default(uuid())
  customer          users      @relation(fields: [customer_id], references: [id])

  customer_id       String
  hotel        Hotel   @relation(fields: [hotel_id], references: [hotel_id])
  hotel_id       Int
  date              DateTime  @default(now())
  // deliveryAddress   Address?   @relation(fields: [address_id], references: [address_id])
  deliveryAddress   DeriveryAddress?
  products          MenuItem[]
  price             Float
  review            String?
  rating            Float?
  address_id        String?   
  status           Status?    @default(PENDING)


}

model CoffeeProduct {
  coffee_id          String @id @unique @default(uuid())
  order_id           String @unique
  hotel_id           Int
  name               String
  price              Float
  quantity_available Int
  type               String
}

model Hotel {
  hotel_id            Int      @id @unique @default(autoincrement())
  admin               users?   @relation(fields: [admin_id], references: [id])
  admin_id            String?  @unique
  name                String
  menu                Menu?
  address             Address?
  orders Order[]
  rating              Float    @default(0)
  lastMonthOrders     Int?     @default(0)
  ThisWeekOrders      Int?     @default(0)
  startingWorkingTime DateTime @default(now())
  endingWorkingTime   DateTime @default(now())
  image               String
  notificationToken   String?
}

model Address {
  address_id String @id @default(uuid())
  hotel      Hotel  @relation(fields: [hotel_id], references: [hotel_id])
  //  Order    Order  @relation(fields: [Order], references: [order_id])
  hotel_id   Int    @unique
  latitude   Float

  longitude Float
  street    String
  district  String
  sector    String
  cell      String
  village   String
  
}

model Menu {
  menu_id    Int        @id @unique @default(autoincrement())
  hotel      Hotel      @relation(fields: [hotel_id], references: [hotel_id])
  hotel_id   Int        @unique
  items      MenuItem[]
  categories Category[]
}

model MenuItem {
  menuItem_id        Int      @id @unique @default(autoincrement())
  name               String
  Menu               Menu    @relation(fields: [menu_id], references: [menu_id])
  menu_id            Int
  price              Float
  category           Category @relation(fields: [category_id], references: [category_id])
  category_id        Int
  quantity_available Int
  description        String
  image              String?
  Order              Order?   @relation(fields: [order_id], references: [order_id])
  order_id           String?  @unique
  Review             Review[]
}

model Category {
  category_id   Int        @id @unique @default(autoincrement())
  type          CATTYPE
  menu          Menu? @relation(fields: [menu_id],references: [menu_id])
  menu_id       Int?
  items      MenuItem[]
  description   String
  image         String?
  name          String
}

model Review {
  review_id   String   @id @unique @default(uuid())
  user        users    @relation(fields: [user_id], references: [id])
  user_id     String
  description String
  title String
  product     MenuItem @relation(fields: [product_id], references: [menuItem_id])
  product_id  Int
  createdAt   DateTime
}

model Notifications {
  id          String    @id @unique @default(uuid())
  title       String
  content     String
  receiver    users     @relation(fields: [receiver_id], references: [id])
  receiver_id String
  createdAt   DateTime? @default(now())
  imageLabel  String?
}

model Property {
  id              String           @id @default(uuid())
  postedBy        String
  // ... other fields of Property
  propertyTenants PropertyTenant[]
}

model PropertyTenant {
  id         String   @id @default(uuid())
  TenantId   String   @map("TenantId")
  PropertyId String   @map("PropertyId")
  Status     String   @map("Status")
  rentAmount Int
  // ... other fields of PropertyTenant
  property   Property @relation(fields: [PropertyId], references: [id])
  user       users    @relation(fields: [TenantId], references: [id])
}

model secret{
  id String @id @default(uuid())
  data Json
}